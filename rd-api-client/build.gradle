import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
    }
}
plugins{
    id "org.dvaske.gradle.git-build-info" version "0.8"
    id 'de.fuerstenau.buildconfig' version '1.1.8'
    id 'maven'
    id 'maven-publish'
}


repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jitpack.io" }
}


apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'de.fuerstenau.buildconfig'

group = 'org.rundeck.api'

/**
 * Generates java source with embedded version info
 */
buildConfig {
    clsName = 'Version'
    packageName = 'org.rundeck.client'
    buildConfigField 'String', 'GIT_COMMIT', {
        project.gitCommit
    }
    buildConfigField 'String', 'GIT_BRANCH', {
        project.gitBranch
    }
    buildConfigField 'String', 'GIT_DESCRIPTION', {
        project.gitDescribeInfo
    }
    buildConfigField 'String', 'BUILD_DATE', {
        new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX").format(new Date())
    }

}


dependencies {

    compileOnly "org.projectlombok:lombok:1.16.16"

    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-jackson:2.1.0'
    compile 'com.squareup.retrofit2:converter-simplexml:2.1.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.5.0'
    compile 'com.squareup.okhttp3:okhttp-urlconnection:3.5.0'


    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'com.squareup.retrofit2:retrofit-mock:2.1.0'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.5.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.28.2'
    testCompile "org.codehaus.groovy:groovy-all:2.5.7"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
}


// produce a jar file for our test classes
task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.java
}

// produce a jar file for our source files
task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java
}

// produce a jar file for our javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

// add all of the artifacts above to our archives list
artifacts {
    archives testJar
    archives sourceJar
    archives javadocJar
}
def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    scm {
        url 'https://github.com/rundeck/rundeck-cli'
        connection 'scm:git:git@github.com/rundeck/rundeck-cli.git'
        developerConnection 'scm:git:git@github.com:rundeck/rundeck-cli.git'
    }
    developers {
        developer {
            id('gschueler')
            name('Greg Schueler')
            email('greg@rundeck.com')
        }
    }
}
publishing {
    publications {
        rdApiClientPublication(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            artifact testJar

            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.description ?: 'Rundeck API Library')
                root.appendNode('name', "Rundeck API Library ${project.version}")
                root.appendNode('url', 'https://github.com/rundeck/rundeck-cli')
                root.children().last() + pomConfig
            }

        }
    }
}

def bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
def bintrayKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') :
                 System.getenv('BINTRAY_API_KEY')
def bintrayUserOrg = project.hasProperty('bintrayUserOrg') ? project.property('bintrayUserOrg') :
                     System.getenv('BINTRAY_USER_ORG')
def bintrayRepo = project.hasProperty('bintrayRepo') ? project.property('bintrayRepo') :
                  System.getenv('BINTRAY_REPO')

def component = (
        project.hasProperty('component') ? project.property('component') :
        System.getenv('BINTRAY_UPLOAD_COMPONENT')
)
if (component &&  ['api'].contains(component) && bintrayUser && bintrayKey && bintrayRepo) {

    apply plugin: 'com.jfrog.bintray'
    bintray {
        user = bintrayUser
        key = bintrayKey
        publications = ['rdApiClientPublication']

        dryRun = false
        publish = true
        override = true
        pkg {
            name = project.name
            repo = bintrayRepo
            if (bintrayUserOrg) {
                userOrg = bintrayUserOrg
            }
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/rundeck/rundeck-cli.git'
            websiteUrl = 'https://github.com/rundeck/rundeck-cli'
            issueTrackerUrl = 'https://github.com/rundeck/rundeck-cli/issues'
            githubRepo = 'rundeck/rundeck-cli' //Optional Github repository
            githubReleaseNotesFile = 'README.md' //Optional Github readme file

            version {
                name = rpmVersion
                desc = "${description} ${rpmVersion}"
                vcsTag = "v${rpmVersion}"
            }
        }
    }
}
