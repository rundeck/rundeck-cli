/*
 * Copyright 2017 Rundeck, Inc. (http://rundeck.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.regex.Matcher

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1'
    }
}
plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.4.1'
    id 'groovy'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
    id "nebula.ospackage" version "4.8.0"
}
ext.githubUrl = "https://github.com/rundeck/rundeck-cli"
ext.changelogFile = file("CHANGELOG.md")

/**
 * Unreleased changes list from the changelog file
 * @param prevVersion
 * @param changelog
 * @return
 */
def unreleasedLog(prevVersion, changelog) {
    def m = changelog?.text =~ ~/(?si)^(## unreleased(.*))## ${prevVersion}.*$/
    if (m.find()) {
        return m.group(2)?.split(/\n/).findAll { it }.collect { it.replaceAll(/^[\*-]\s*/, '') }
    }
}

/**
 * Generate partial or full changelog
 * @param prevTag
 * @param baseUrl
 * @param curVersion
 * @param prevVersion
 * @param changelog
 * @param full
 * @return
 */
def genChangelog(prevTag, baseUrl, curVersion, prevVersion, File changelog, full = false) {
    def diff = "${prevTag}..."
    def serr = new StringBuilder(), sout = new StringBuilder()
    def proc = ['git', 'log', '--no-merges','--pretty=format:%s', diff].execute()
    proc.consumeProcessOutput(sout, serr)
    proc.waitForOrKill(1000)
    def logs = sout.toString().readLines()
    def include = [~/.*[fF]ix(e[sd])? #\d+.*/, ~/^[fF]ix(e[sd])?:.*/, ~/^[lL]og:?.*/]

    def unrel = changelog ? unreleasedLog(prevVersion, changelog) ?: [] : []

    unrel.addAll(logs.findAll { t -> t && include.any { t ==~ it } })
    logs = unrel.
            collect { '* ' + it.replaceAll(/^[lL]og:\s+/,'').replaceAll(/(#(\d+))/, "[Issue \$1]($baseUrl/issues/\$2)") }.
            join('\n')
    logs = logs ? logs + '\n' : ''
    if (full && changelog) {
        def text = """## ${curVersion}

$logs
[Changes]($baseUrl/compare/${diff}v${curVersion})

"""
        return changelog.text.replaceAll(
                ~/(?s)^(## unreleased(.*))?(## ${prevVersion}.*)$/,
                Matcher.quoteReplacement(text) + '$3'
        )
    }
    return logs
}

scmVersion {
    tag {
        prefix = 'v'
        versionSeparator = ''
    }
    hooks {
        pre 'fileUpdate', [file       : 'docs/_config.yml',
                           pattern    : { v, c -> /app_version: [^\s]+/ },
                           replacement: { v, c -> "app_version: $v" }]
        pre 'fileUpdate', [file       : 'src/main/resources/rd-banner.txt',
                           pattern    : { v, c -> /\(v$v\)/ },
                           replacement: { v, c -> "(v$v)" }]
        pre { context ->
            def changelog = changelogFile
            def changes = file('docs/changes.md')
            def changest = file('docs/_changes.md')
            def newtext = genChangelog(
                    "v${context.previousVersion}",
                    githubUrl,
                    context.currentVersion,
                    context.previousVersion,
                    changelog,
                    true
            )
            changelog.text = newtext
            changes.text = changest.text + newtext

            context.addCommitPattern('docs/changes.md')
            context.addCommitPattern('CHANGELOG.md')
        }
        pre 'commit'
    }
}

allprojects {
    project.version = scmVersion.version
    ext.rpmVersion=project.version.replaceAll('-', '.')
}

def getAxionVersion() {
    def ctx = pl.allegro.tech.build.axion.release.infrastructure.di.GradleAwareContext.create(project)
    def rules = ctx.rules
    scmVersion.versionService.currentVersion(
            rules.version,
            rules.tag,
            rules.nextVersion
    )
}

task previousVersion(){
    doLast {
        println "Previous version: ${axionVersion.previousVersion}"
    }
}
task changeLog(){
    doLast {
        def version = axionVersion
        println genChangelog(
                version.position.latestTag,
                githubUrl,
                version.version,
                version.previousVersion,
                changelogFile,
                project.hasProperty("changelogFull")
        )
    }
}


apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'nebula.ospackage'

mainClassName = 'org.rundeck.client.tool.Main'
applicationName = 'rd'
//install path in rpm/deb
ext.distInstallPath = '/var/lib/rundeck-cli'
defaultTasks 'clean', 'build'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

ext.toolbeltVersion = "0.2.2"
ext.toolbeltGroup =  "${toolbeltVersion.contains('SNAPSHOT')?'org':'com.github'}.rundeck.cli-toolbelt"

dependencies {
    compileOnly "org.projectlombok:lombok:1.16.16"
    annotationProcessor "org.projectlombok:lombok:1.16.16"

    compile project(":rd-api-client")

    compile "$toolbeltGroup:toolbelt:$toolbeltVersion"
    compile "$toolbeltGroup:toolbelt-snakeyaml:$toolbeltVersion"
    compile "$toolbeltGroup:toolbelt-json-jackson:$toolbeltVersion"
    compile "$toolbeltGroup:toolbelt-jewelcli:$toolbeltVersion"

    testCompile project(":rd-api-client")
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'com.squareup.retrofit2:retrofit-mock:2.1.0'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.5.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
    testCompile "org.codehaus.groovy:groovy-all:2.3.7"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
}
shadowJar {
   
}

//force distZip/distTar artifacts to be overwritten by shadow versions
shadowDistZip.mustRunAfter distZip
shadowDistTar.mustRunAfter distTar

def scriptsClos = {

    def prependConfigData = { regexTest, additionalText, line ->
        // Looking for the line that starts with regexTest closure argument,
        //prepend the additionalText
        line = line.replaceAll(~/${regexTest}/) { original ->
            additionalText + "\n" + original
        }
    }
    def appendConfigData = { regexTest, additionalText, line ->
        line = line.replaceAll(~/${regexTest}/) { original ->
            original + "\n" + additionalText
        }
    }

    def addUnixConfigSource = prependConfigData.curry(
            '^# Determine the Java command to use to start the JVM.*',
            '''
# Source user's config file
RD_CONF=${RD_CONF:-$HOME/.$APP_NAME/$APP_NAME.conf}
test -f $RD_CONF && . $RD_CONF
'''
    )
    def setE = appendConfigData.curry(
            '^#!/usr/bin/env sh',
            '''
set -e
'''
    )

    // The default script content is generated and
    // with the doLast method we can still alter
    // the contents before the complete task ends.
    doLast {
        // Alter the start script for Unix systems.
        unixScript.text =
                unixScript
                        .readLines()
                        .collect(addUnixConfigSource)
                        .collect(setE)
                        .join('\n')

        //TODO: modify windows start script to load config
    }

}
startScripts scriptsClos
startShadowScripts scriptsClos

task verifyScripts {
    group = "Verification"
    description = 'Verify the start scripts (normal and shadow) contain the modifications for the RD_CONF'
    doFirst {
        [startScripts.outputDir, startShadowScripts.outputDir].each { dir ->
            def f = new File(dir, applicationName)
            assert f.exists()
            assert f.text ==~ /(?s)^.*RD_CONF.*$/
        }
    }
}
check.dependsOn verifyScripts

/**
 * Define rpm/deb details
 */
ospackage {
    version = rpmVersion
    release = 1
    summary = "A commandline tool for Rundeck."
    packageDescription = "The rd program provides an all-in-one commandline tool to interact with Rundeck"
    url = 'https://github.com/rundeck/rundeck-cli'
    vendor = 'Rundeck, Inc.'
    license = 'APL'
    os = 'LINUX'
    packageGroup = 'System'
    user = 'root'
    prefix(distInstallPath)

    //packaging includes the shadowDistZip contents, exclude *.bat
    from(zipTree(shadowDistZip.outputs.files.singleFile)) {
        exclude '**/*.bat'
        into distInstallPath
    }

    def archivedir=shadowDistZip.archiveName - ".${shadowDistZip.extension}"

    //symlink /usr/bin/rd to the rd script
    postInstall("""
/bin/ln -s \${RPM_INSTALL_PREFIX:-${distInstallPath}}/${archivedir}/bin/${applicationName} /usr/bin/${applicationName} 
""")
}

//depend on the shadow artifact
buildDeb.dependsOn shadowDistZip
buildRpm.dependsOn shadowDistZip
assemble.dependsOn buildRpm, buildDeb

apply from: 'gradle/bintray.gradle'

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}
