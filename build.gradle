/*
 * Copyright 2017 Rundeck, Inc. (http://rundeck.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'base'
    alias(libs.plugins.axion)
    alias(libs.plugins.nexusPublish)
}
import java.util.regex.Matcher
import pl.allegro.tech.build.axion.release.domain.VersionConfig
import pl.allegro.tech.build.axion.release.infrastructure.di.VersionResolutionContext

ext.githubUrl = "https://github.com/rundeck/rundeck-cli"
ext.changelogFile = file("CHANGELOG.md")

subprojects{

    apply plugin: "java-library"

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }
}

/**
 * Unreleased changes list from the changelog file
 * @param prevVersion
 * @param changelog
 * @return
 */
def unreleasedLog(prevVersion, changelog) {
    def m = changelog?.text =~ ~/(?si)^(## unreleased(.*))## ${prevVersion}.*$/
    if (m.find()) {
        return m.group(2)?.split(/\n/).findAll { it }//.collect { it.replaceAll(/^[\*-]\s*/, '') }
    }
}
def getCommitLogs(String prevTag){
    def diff = "${prevTag}..."
    def serr = new StringBuilder(), sout = new StringBuilder()
    def proc = ['git', 'log', '--no-merges','--pretty=format:%s', diff].execute()
    proc.consumeProcessOutput(sout, serr)
    proc.waitForOrKill(1000)
    def logs= sout.toString().readLines()

    def include = [~/.*[fF]ix(e[sd])? #\d+.*/, ~/^[fF]ix(e[sd])?:.*/, ~/^[lL]og:?.*/]
    logs.findAll { t -> t && include.any { t ==~ it } }.collect{"* "+it}
}
/**
 * Generate partial or full changelog
 * @param prevTag
 * @param baseUrl
 * @param curVersion
 * @param prevVersion
 * @param changelog
 * @param full
 * @return
 */
def genChangelog(prevTag, baseUrl, curVersion, prevVersion, File changelog, full = false) {
    def diff = "${prevTag}..."
    def unrel = changelog ? unreleasedLog(prevVersion, changelog) ?: [] : []

    if(!project.findProperty("skipGitCommitLogs")){
        unrel.addAll(getCommitLogs(prevTag))
    }
    def logs = unrel.
            collect { it.replaceAll(/^[lL]og:\s+/,'').replaceAll(/(#(\d+))/, "[Issue \$1]($baseUrl/issues/\$2)") }.
            join('\n')
    if (full && changelog) {
        def text = """## ${curVersion}

$logs

[Changes]($baseUrl/compare/${diff}v${curVersion})

"""
        return changelog.text.replaceAll(
                ~/(?si)^(## unreleased(.*))?(## ${prevVersion}.*)$/,
                Matcher.quoteReplacement(text) + '$3'
        )
    }
    return logs
}

/**
 * write header template then part of CHANGES.md to the docs/changes.md
 * @return
 */
def updateChangelogDocs() {
    file('docs/changes.md').withWriter { writer ->
        writer << file('docs/_changes.md').text
        def matched = false
        file('CHANGELOG.md').eachLine { line ->
            if (matched || line =~ /^## \d.*/) {
                matched = true
                writer << line + '\n'
            }
        }
    }
}

tasks.register('generateDocs'){
    description = "Update docs/changes.md with contents from CHANGELOG.md"
    doLast {
        updateChangelogDocs()
    }
}

scmVersion {
    hooks {
        pre 'fileUpdate', [file       : 'docs/_config.yml',
                           pattern    : { v, c -> /app_version: [^\s]+/ },
                           replacement: { v, c -> "app_version: $v" }]
        pre { context ->
            def previousTag = context.rules.tag.serialize.apply(context.rules.tag, context.previousVersion.toString())
            changelogFile.text = genChangelog(
                    previousTag,
                    githubUrl,
                    context.currentVersion,
                    context.previousVersion,
                    changelogFile,
                    true
            )
            updateChangelogDocs()

            context.addCommitPattern('docs/changes.md')
            context.addCommitPattern('CHANGELOG.md')
        }
        pre 'commit'
    }
}

allprojects {
    project.version = scmVersion.version
    ext.rpmVersion=project.version.replaceAll('-', '.')

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

ext.axionVersionConfig = project.objects.newInstance(VersionConfig,project.rootProject.layout.projectDirectory)
ext.axionContext= VersionResolutionContext.create(ext.axionVersionConfig, project.rootProject.layout.projectDirectory)


def getAxionVersion = {
    def rules = axionContext.rules()
    axionContext.versionService().currentVersion(
        rules.version,
        rules.tag,
        rules.nextVersion
    )
}

def getPreviousTag = {
    def rules = axionContext.rules()
    def curVersion = getAxionVersion()
    rules.tag.serialize.apply(rules.tag, curVersion.previousVersion.toString())
}

tasks.register('previousVersion'){
    doLast {
        println "Previous version: ${getAxionVersion().previousVersion}"
        println "Previous tag: ${getPreviousTag()}"
    }
}
tasks.register('changeLog'){
    doLast {
        def version = getAxionVersion()
        def prevTag = getPreviousTag()
        println genChangelog(
                prevTag,
                githubUrl,
                version.version,
                version.previousVersion,
                changelogFile,
                project.hasProperty("changelogFull")
        )
    }
}


nexusPublishing {
    packageGroup = 'org.rundeck'
    repositories {
        sonatype{
            stagingProfileId = '67d196ce5bae'
        }
    }
}
